diff -r -U 3 src/minecraft/net/minecraft/client/gui/GuiButton.java ../src/main/java/net/minecraft/client/gui/GuiButton.java
--- src/minecraft/net/minecraft/client/gui/GuiButton.java	2017-01-26 09:31:11.986021000 -0500
+++ ../src/main/java/net/minecraft/client/gui/GuiButton.java	2016-09-20 20:22:34.197112400 -0400
@@ -155,4 +155,8 @@
     {
         this.width = width;
     }
+
+    public int getButtonHeight() {
+        return height;
+    }
 }
diff -r -U 3 src/minecraft/net/minecraft/client/gui/GuiMainMenu.java ../src/main/java/net/minecraft/client/gui/GuiMainMenu.java
--- src/minecraft/net/minecraft/client/gui/GuiMainMenu.java	2017-01-26 09:31:12.308683000 -0500
+++ ../src/main/java/net/minecraft/client/gui/GuiMainMenu.java	2016-12-23 17:13:42.230978900 -0500
@@ -156,12 +156,11 @@
         this.updateCounter = RANDOM.nextFloat();
         this.openGLWarning1 = "";
 
-        if (!GLContext.getCapabilities().OpenGL20 && !OpenGlHelper.areShadersSupported())
-        {
+        /*if(!GLContext.getCapabilities().OpenGL20 && !OpenGlHelper.areShadersSupported()) {
             this.openGLWarning1 = I18n.format("title.oldgl1", new Object[0]);
             this.openGLWarning2 = I18n.format("title.oldgl2", new Object[0]);
             this.openGLWarningLink = "https://help.mojang.com/customer/portal/articles/325948?ref=game";
-        }
+        }*/
     }
 
     /**
diff -r -U 3 src/minecraft/net/minecraft/client/gui/GuiScreen.java ../src/main/java/net/minecraft/client/gui/GuiScreen.java
--- src/minecraft/net/minecraft/client/gui/GuiScreen.java	2017-01-26 09:31:12.476306000 -0500
+++ ../src/main/java/net/minecraft/client/gui/GuiScreen.java	2016-09-20 20:22:34.219672800 -0400
@@ -774,4 +774,10 @@
     {
         this.setWorldAndResolution(mcIn, w, h);
     }
+
+    public List<GuiButton> getButtonList() {
+        return buttonList;
+    }
 }
+
+
diff -r -U 3 src/minecraft/net/minecraft/client/Minecraft.java ../src/main/java/net/minecraft/client/Minecraft.java
--- src/minecraft/net/minecraft/client/Minecraft.java	2017-01-26 09:31:11.782862000 -0500
+++ ../src/main/java/net/minecraft/client/Minecraft.java	2017-01-21 20:57:57.198792100 -0500
@@ -1,5 +1,6 @@
 package net.minecraft.client;
 
+import com.continuum.nova.NovaRenderer;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
@@ -383,6 +384,8 @@
     /** Profiler currently displayed in the debug screen pie chart */
     private String debugProfilerName = "root";
 
+    private NovaRenderer nova = new NovaRenderer();
+
     public Minecraft(GameConfiguration gameConfig)
     {
         theMinecraft = this;
@@ -408,6 +411,8 @@
         this.jvm64bit = isJvm64bit();
         this.theIntegratedServer = null;
 
+        nova.preInit();
+
         if (gameConfig.serverInfo.serverName != null)
         {
             this.serverName = gameConfig.serverInfo.serverName;
@@ -507,10 +512,10 @@
         LOGGER.info("LWJGL Version: {}", new Object[] {Sys.getVersion()});
         this.setWindowIcon();
         this.setInitialDisplayMode();
-        this.createDisplay();
-        OpenGlHelper.initializeTextures();
-        this.framebufferMc = new Framebuffer(this.displayWidth, this.displayHeight, true);
-        this.framebufferMc.setFramebufferColor(0.0F, 0.0F, 0.0F, 0.0F);
+        //this.createDisplay();
+        //OpenGlHelper.initializeTextures();
+        //this.framebufferMc = new Framebuffer(this.displayWidth, this.displayHeight, true);
+        //this.framebufferMc.setFramebufferColor(0.0F, 0.0F, 0.0F, 0.0F);
         this.registerMetadataSerializers();
         this.mcResourcePackRepository = new ResourcePackRepository(this.fileResourcepacks, new File(this.mcDataDir, "server-resource-packs"), this.mcDefaultResourcePack, this.metadataSerializer_, this.gameSettings);
         this.mcResourceManager = new SimpleReloadableResourceManager(this.metadataSerializer_);
@@ -538,22 +543,19 @@
         this.mcResourceManager.registerReloadListener(this.standardGalacticFontRenderer);
         this.mcResourceManager.registerReloadListener(new GrassColorReloadListener());
         this.mcResourceManager.registerReloadListener(new FoliageColorReloadListener());
-        AchievementList.OPEN_INVENTORY.setStatStringFormatter(new IStatStringFormat()
-        {
-            public String formatString(String str)
+        mcResourceManager.registerReloadListener(nova);
+        AchievementList.OPEN_INVENTORY.setStatStringFormatter(str -> {
+            try
             {
-                try
-                {
-                    return String.format(str, new Object[] {GameSettings.getKeyDisplayString(Minecraft.this.gameSettings.keyBindInventory.getKeyCode())});
-                }
-                catch (Exception exception)
-                {
-                    return "Error: " + exception.getLocalizedMessage();
-                }
+                return String.format(str, GameSettings.getKeyDisplayString(Minecraft.this.gameSettings.keyBindInventory.getKeyCode()));
+            }
+            catch (Exception exception)
+            {
+                return "Error: " + exception.getLocalizedMessage();
             }
         });
         this.mouseHelper = new MouseHelper();
-        this.checkGLError("Pre startup");
+        /*this.checkGLError("Pre startup");
         GlStateManager.enableTexture2D();
         GlStateManager.shadeModel(7425);
         GlStateManager.clearDepth(1.0D);
@@ -565,7 +567,8 @@
         GlStateManager.matrixMode(5889);
         GlStateManager.loadIdentity();
         GlStateManager.matrixMode(5888);
-        this.checkGLError("Startup");
+        this.checkGLError("Startup");*/
+        // TODO: Check out the TextureMap for texture atlas crap
         this.textureMapBlocks = new TextureMap("textures");
         this.textureMapBlocks.setMipmapLevels(this.gameSettings.mipmapLevels);
         this.renderEngine.loadTickableTexture(TextureMap.LOCATION_BLOCKS_TEXTURE, this.textureMapBlocks);
@@ -576,7 +579,7 @@
         this.blockColors = BlockColors.init();
         this.itemColors = ItemColors.init(this.blockColors);
         this.renderItem = new RenderItem(this.renderEngine, this.modelManager, this.itemColors);
-        this.renderManager = new RenderManager(this.renderEngine, this.renderItem);
+        //this.renderManager = new RenderManager(this.renderEngine, this.renderItem);
         this.itemRenderer = new ItemRenderer(this);
         this.mcResourceManager.registerReloadListener(this.renderItem);
         this.entityRenderer = new EntityRenderer(this, this.mcResourceManager);
@@ -1022,7 +1025,7 @@
             this.setIngameNotInFocus();
             KeyBinding.unPressAllKeys();
 
-            while (Mouse.next())
+            /*while (Mouse.next())
             {
                 ;
             }
@@ -1030,13 +1033,14 @@
             while (Keyboard.next())
             {
                 ;
-            }
+            }*/
 
             ScaledResolution scaledresolution = new ScaledResolution(this);
             int i = scaledresolution.getScaledWidth();
             int j = scaledresolution.getScaledHeight();
             ((GuiScreen)guiScreenIn).setWorldAndResolution(this, i, j);
             this.skipRenderWorld = false;
+            nova.setGuiScreen(guiScreenIn);
         }
         else
         {
@@ -1147,7 +1151,7 @@
         this.mcProfiler.startSection("render");
         GlStateManager.pushMatrix();
         GlStateManager.clear(16640);
-        this.framebufferMc.bindFramebuffer(true);
+        //this.framebufferMc.bindFramebuffer(true);
         this.mcProfiler.startSection("display");
         GlStateManager.enableTexture2D();
         this.mcProfiler.endSection();
@@ -1155,7 +1159,8 @@
         if (!this.skipRenderWorld)
         {
             this.mcProfiler.endStartSection("gameRenderer");
-            this.entityRenderer.updateCameraAndRender(this.timer.renderPartialTicks, i);
+            //this.entityRenderer.updateCameraAndRender(this.timer.renderPartialTicks, i);
+            nova.updateCameraAndRender(timer.renderPartialTicks, i, this);
             this.mcProfiler.endSection();
         }
 
@@ -1178,13 +1183,13 @@
         }
 
         this.guiAchievement.updateAchievementWindow();
-        this.framebufferMc.unbindFramebuffer();
+        //this.framebufferMc.unbindFramebuffer();
         GlStateManager.popMatrix();
         GlStateManager.pushMatrix();
-        this.framebufferMc.framebufferRender(this.displayWidth, this.displayHeight);
+        //this.framebufferMc.framebufferRender(this.displayWidth, this.displayHeight);
         GlStateManager.popMatrix();
         GlStateManager.pushMatrix();
-        this.entityRenderer.renderStreamIndicator(this.timer.renderPartialTicks);
+        //this.entityRenderer.renderStreamIndicator(this.timer.renderPartialTicks);
         GlStateManager.popMatrix();
         this.mcProfiler.startSection("root");
         this.updateDisplay();
@@ -1224,14 +1229,14 @@
     public void updateDisplay()
     {
         this.mcProfiler.startSection("display_update");
-        Display.update();
+        //Display.update();
         this.mcProfiler.endSection();
         this.checkWindowResize();
     }
 
     protected void checkWindowResize()
     {
-        if (!this.fullscreen && Display.wasResized())
+        /*if (!this.fullscreen && Display.wasResized())
         {
             int i = this.displayWidth;
             int j = this.displayHeight;
@@ -1252,7 +1257,7 @@
 
                 this.resize(this.displayWidth, this.displayHeight);
             }
-        }
+        }*/
     }
 
     public int getLimitFramerate()
@@ -2980,7 +2985,7 @@
         playerSnooper.addStatToSnooper("opengl_vendor", GlStateManager.glGetString(7936));
         playerSnooper.addStatToSnooper("client_brand", ClientBrandRetriever.getClientModName());
         playerSnooper.addStatToSnooper("launched_version", this.launchedVersion);
-        ContextCapabilities contextcapabilities = GLContext.getCapabilities();
+        /*ContextCapabilities contextcapabilities = GLContext.getCapabilities();
         playerSnooper.addStatToSnooper("gl_caps[ARB_arrays_of_arrays]", Boolean.valueOf(contextcapabilities.GL_ARB_arrays_of_arrays));
         playerSnooper.addStatToSnooper("gl_caps[ARB_base_instance]", Boolean.valueOf(contextcapabilities.GL_ARB_base_instance));
         playerSnooper.addStatToSnooper("gl_caps[ARB_blend_func_extended]", Boolean.valueOf(contextcapabilities.GL_ARB_blend_func_extended));
@@ -3084,7 +3089,7 @@
         GlStateManager.glGetError();
         playerSnooper.addStatToSnooper("gl_caps[gl_max_array_texture_layers]", Integer.valueOf(GlStateManager.glGetInteger(35071)));
         GlStateManager.glGetError();
-        playerSnooper.addStatToSnooper("gl_max_texture_size", Integer.valueOf(getGLMaximumTextureSize()));
+        playerSnooper.addStatToSnooper("gl_max_texture_size", Integer.valueOf(getGLMaximumTextureSize()));*/
         GameProfile gameprofile = this.session.getProfile();
 
         if (gameprofile != null && gameprofile.getId() != null)
@@ -3098,7 +3103,9 @@
      */
     public static int getGLMaximumTextureSize()
     {
-        for (int i = 16384; i > 0; i >>= 1)
+        return 8096;
+
+        /*for (int i = 16384; i > 0; i >>= 1)
         {
             GlStateManager.glTexImage2D(32868, 0, 6408, i, i, 0, 6408, 5121, (IntBuffer)null);
             int j = GlStateManager.glGetTexLevelParameteri(32868, 0, 4096);
@@ -3109,7 +3116,7 @@
             }
         }
 
-        return -1;
+        return -1;*/
     }
 
     /**
diff -r -U 3 src/minecraft/net/minecraft/client/renderer/EntityRenderer.java ../src/main/java/net/minecraft/client/renderer/EntityRenderer.java
--- src/minecraft/net/minecraft/client/renderer/EntityRenderer.java	2017-01-26 09:31:14.308377000 -0500
+++ ../src/main/java/net/minecraft/client/renderer/EntityRenderer.java	2016-09-20 20:22:34.288355000 -0400
@@ -2085,4 +2085,16 @@
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.popMatrix();
     }
+
+    public float getFogColorRed() {
+        return fogColorRed;
+    }
+
+    public float getFogColorGreen() {
+        return fogColorRed;
+    }
+
+    public float getFogColorBlue() {
+        return fogColorBlue;
+    }
 }
diff -r -U 3 src/minecraft/net/minecraft/client/renderer/GlStateManager.java ../src/main/java/net/minecraft/client/renderer/GlStateManager.java
--- src/minecraft/net/minecraft/client/renderer/GlStateManager.java	2017-01-26 09:31:14.326384000 -0500
+++ ../src/main/java/net/minecraft/client/renderer/GlStateManager.java	2016-12-23 17:10:38.940765200 -0500
@@ -1,16 +1,12 @@
 package net.minecraft.client.renderer;
 
+import org.lwjgl.BufferUtils;
+import org.lwjgl.util.vector.Quaternion;
+
+import javax.annotation.Nullable;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
-import javax.annotation.Nullable;
-import org.lwjgl.BufferUtils;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL13;
-import org.lwjgl.opengl.GL12;
-import org.lwjgl.opengl.GL14;
-import org.lwjgl.opengl.GLContext;
-import org.lwjgl.util.vector.Quaternion;
 
 public class GlStateManager
 {
@@ -39,12 +35,12 @@
 
     public static void pushAttrib()
     {
-        GL11.glPushAttrib(8256);
+        //GL11.glPushAttrib(8256);
     }
 
     public static void popAttrib()
     {
-        GL11.glPopAttrib();
+        //GL11.glPopAttrib();
     }
 
     public static void disableAlpha()
@@ -63,7 +59,7 @@
         {
             alphaState.func = func;
             alphaState.ref = ref;
-            GL11.glAlphaFunc(func, ref);
+            //GL11.glAlphaFunc(func, ref);
         }
     }
 
@@ -103,23 +99,23 @@
         {
             colorMaterialState.face = face;
             colorMaterialState.mode = mode;
-            GL11.glColorMaterial(face, mode);
+            //GL11.glColorMaterial(face, mode);
         }
     }
 
     public static void glLight(int light, int pname, FloatBuffer params)
     {
-        GL11.glLight(light, pname, params);
+        //GL11.glLight(light, pname, params);
     }
 
     public static void glLightModel(int pname, FloatBuffer params)
     {
-        GL11.glLightModel(pname, params);
+        //GL11.glLightModel(pname, params);
     }
 
     public static void glNormal3f(float nx, float ny, float nz)
     {
-        GL11.glNormal3f(nx, ny, nz);
+        //GL11.glNormal3f(nx, ny, nz);
     }
 
     public static void disableDepth()
@@ -137,7 +133,7 @@
         if (depthFunc != depthState.depthFunc)
         {
             depthState.depthFunc = depthFunc;
-            GL11.glDepthFunc(depthFunc);
+            //GL11.glDepthFunc(depthFunc);
         }
     }
 
@@ -146,7 +142,7 @@
         if (flagIn != depthState.maskEnabled)
         {
             depthState.maskEnabled = flagIn;
-            GL11.glDepthMask(flagIn);
+            //GL11.glDepthMask(flagIn);
         }
     }
 
@@ -171,7 +167,7 @@
         {
             blendState.srcFactor = srcFactor;
             blendState.dstFactor = dstFactor;
-            GL11.glBlendFunc(srcFactor, dstFactor);
+            //GL11.glBlendFunc(srcFactor, dstFactor);
         }
     }
 
@@ -194,12 +190,12 @@
 
     public static void glBlendEquation(int blendEquation)
     {
-        GL14.glBlendEquation(blendEquation);
+        //GL14.glBlendEquation(blendEquation);
     }
 
     public static void enableOutlineMode(int p_187431_0_)
     {
-        BUF_FLOAT_4.put(0, (float)(p_187431_0_ >> 16 & 255) / 255.0F);
+        /*BUF_FLOAT_4.put(0, (float)(p_187431_0_ >> 16 & 255) / 255.0F);
         BUF_FLOAT_4.put(1, (float)(p_187431_0_ >> 8 & 255) / 255.0F);
         BUF_FLOAT_4.put(2, (float)(p_187431_0_ >> 0 & 255) / 255.0F);
         BUF_FLOAT_4.put(3, (float)(p_187431_0_ >> 24 & 255) / 255.0F);
@@ -210,18 +206,18 @@
         glTexEnvi(8960, 34192, 768);
         glTexEnvi(8960, 34162, 7681);
         glTexEnvi(8960, 34184, 5890);
-        glTexEnvi(8960, 34200, 770);
+        glTexEnvi(8960, 34200, 770);*/
     }
 
     public static void disableOutlineMode()
     {
-        glTexEnvi(8960, 8704, 8448);
+        /*glTexEnvi(8960, 8704, 8448);
         glTexEnvi(8960, 34161, 8448);
         glTexEnvi(8960, 34162, 8448);
         glTexEnvi(8960, 34176, 5890);
         glTexEnvi(8960, 34184, 5890);
         glTexEnvi(8960, 34192, 768);
-        glTexEnvi(8960, 34200, 770);
+        glTexEnvi(8960, 34200, 770);*/
     }
 
     public static void enableFog()
@@ -244,7 +240,7 @@
         if (param != fogState.mode)
         {
             fogState.mode = param;
-            GL11.glFogi(GL11.GL_FOG_MODE, param);
+            //GL11.glFogi(GL11.GL_FOG_MODE, param);
         }
     }
 
@@ -253,7 +249,7 @@
         if (param != fogState.density)
         {
             fogState.density = param;
-            GL11.glFogf(GL11.GL_FOG_DENSITY, param);
+            //GL11.glFogf(GL11.GL_FOG_DENSITY, param);
         }
     }
 
@@ -262,7 +258,7 @@
         if (param != fogState.start)
         {
             fogState.start = param;
-            GL11.glFogf(GL11.GL_FOG_START, param);
+            //GL11.glFogf(GL11.GL_FOG_START, param);
         }
     }
 
@@ -271,18 +267,18 @@
         if (param != fogState.end)
         {
             fogState.end = param;
-            GL11.glFogf(GL11.GL_FOG_END, param);
+            //GL11.glFogf(GL11.GL_FOG_END, param);
         }
     }
 
     public static void glFog(int pname, FloatBuffer param)
     {
-        GL11.glFog(pname, param);
+        //GL11.glFog(pname, param);
     }
 
     public static void glFogi(int pname, int param)
     {
-        GL11.glFogi(pname, param);
+        //GL11.glFogi(pname, param);
     }
 
     public static void enableCull()
@@ -305,13 +301,13 @@
         if (mode != cullState.mode)
         {
             cullState.mode = mode;
-            GL11.glCullFace(mode);
+            //GL11.glCullFace(mode);
         }
     }
 
     public static void glPolygonMode(int face, int mode)
     {
-        GL11.glPolygonMode(face, mode);
+        //GL11.glPolygonMode(face, mode);
     }
 
     public static void enablePolygonOffset()
@@ -330,7 +326,7 @@
         {
             polygonOffsetState.factor = factor;
             polygonOffsetState.units = units;
-            GL11.glPolygonOffset(factor, units);
+            //GL11.glPolygonOffset(factor, units);
         }
     }
 
@@ -354,7 +350,7 @@
         if (opcode != colorLogicState.opcode)
         {
             colorLogicState.opcode = opcode;
-            GL11.glLogicOp(opcode);
+            //GL11.glLogicOp(opcode);
         }
     }
 
@@ -375,13 +371,13 @@
         if (param != glstatemanager$texgencoord.param)
         {
             glstatemanager$texgencoord.param = param;
-            GL11.glTexGeni(glstatemanager$texgencoord.coord, GL11.GL_TEXTURE_GEN_MODE, param);
+            //GL11.glTexGeni(glstatemanager$texgencoord.coord, GL11.GL_TEXTURE_GEN_MODE, param);
         }
     }
 
     public static void texGen(GlStateManager.TexGen texGen, int pname, FloatBuffer params)
     {
-        GL11.glTexGen(texGenCoord(texGen).coord, pname, params);
+        //GL11.glTexGen(texGenCoord(texGen).coord, pname, params);
     }
 
     private static GlStateManager.TexGenCoord texGenCoord(GlStateManager.TexGen texGen)
@@ -426,42 +422,42 @@
 
     public static void glTexEnv(int p_187448_0_, int p_187448_1_, FloatBuffer p_187448_2_)
     {
-        GL11.glTexEnv(p_187448_0_, p_187448_1_, p_187448_2_);
+        //GL11.glTexEnv(p_187448_0_, p_187448_1_, p_187448_2_);
     }
 
     public static void glTexEnvi(int p_187399_0_, int p_187399_1_, int p_187399_2_)
     {
-        GL11.glTexEnvi(p_187399_0_, p_187399_1_, p_187399_2_);
+        //GL11.glTexEnvi(p_187399_0_, p_187399_1_, p_187399_2_);
     }
 
     public static void glTexEnvf(int p_187436_0_, int p_187436_1_, float p_187436_2_)
     {
-        GL11.glTexEnvf(p_187436_0_, p_187436_1_, p_187436_2_);
+        //GL11.glTexEnvf(p_187436_0_, p_187436_1_, p_187436_2_);
     }
 
     public static void glTexParameterf(int p_187403_0_, int p_187403_1_, float p_187403_2_)
     {
-        GL11.glTexParameterf(p_187403_0_, p_187403_1_, p_187403_2_);
+        //GL11.glTexParameterf(p_187403_0_, p_187403_1_, p_187403_2_);
     }
 
     public static void glTexParameteri(int p_187421_0_, int p_187421_1_, int p_187421_2_)
     {
-        GL11.glTexParameteri(p_187421_0_, p_187421_1_, p_187421_2_);
+        //GL11.glTexParameteri(p_187421_0_, p_187421_1_, p_187421_2_);
     }
 
     public static int glGetTexLevelParameteri(int p_187411_0_, int p_187411_1_, int p_187411_2_)
     {
-        return GL11.glGetTexLevelParameteri(p_187411_0_, p_187411_1_, p_187411_2_);
+        return 0;//GL11.glGetTexLevelParameteri(p_187411_0_, p_187411_1_, p_187411_2_);
     }
 
     public static int generateTexture()
     {
-        return GL11.glGenTextures();
+        return 0;//GL11.glGenTextures();
     }
 
     public static void deleteTexture(int texture)
     {
-        GL11.glDeleteTextures(texture);
+        //GL11.glDeleteTextures(texture);
 
         for (GlStateManager.TextureState glstatemanager$texturestate : textureState)
         {
@@ -477,28 +473,28 @@
         if (texture != textureState[activeTextureUnit].textureName)
         {
             textureState[activeTextureUnit].textureName = texture;
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
+            //GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
         }
     }
 
     public static void glTexImage2D(int p_187419_0_, int p_187419_1_, int p_187419_2_, int p_187419_3_, int p_187419_4_, int p_187419_5_, int p_187419_6_, int p_187419_7_, @Nullable IntBuffer p_187419_8_)
     {
-        GL11.glTexImage2D(p_187419_0_, p_187419_1_, p_187419_2_, p_187419_3_, p_187419_4_, p_187419_5_, p_187419_6_, p_187419_7_, p_187419_8_);
+        //GL11.glTexImage2D(p_187419_0_, p_187419_1_, p_187419_2_, p_187419_3_, p_187419_4_, p_187419_5_, p_187419_6_, p_187419_7_, p_187419_8_);
     }
 
     public static void glTexSubImage2D(int p_187414_0_, int p_187414_1_, int p_187414_2_, int p_187414_3_, int p_187414_4_, int p_187414_5_, int p_187414_6_, int p_187414_7_, IntBuffer p_187414_8_)
     {
-        GL11.glTexSubImage2D(p_187414_0_, p_187414_1_, p_187414_2_, p_187414_3_, p_187414_4_, p_187414_5_, p_187414_6_, p_187414_7_, p_187414_8_);
+        //GL11.glTexSubImage2D(p_187414_0_, p_187414_1_, p_187414_2_, p_187414_3_, p_187414_4_, p_187414_5_, p_187414_6_, p_187414_7_, p_187414_8_);
     }
 
     public static void glCopyTexSubImage2D(int p_187443_0_, int p_187443_1_, int p_187443_2_, int p_187443_3_, int p_187443_4_, int p_187443_5_, int p_187443_6_, int p_187443_7_)
     {
-        GL11.glCopyTexSubImage2D(p_187443_0_, p_187443_1_, p_187443_2_, p_187443_3_, p_187443_4_, p_187443_5_, p_187443_6_, p_187443_7_);
+        //GL11.glCopyTexSubImage2D(p_187443_0_, p_187443_1_, p_187443_2_, p_187443_3_, p_187443_4_, p_187443_5_, p_187443_6_, p_187443_7_);
     }
 
     public static void glGetTexImage(int p_187433_0_, int p_187433_1_, int p_187433_2_, int p_187433_3_, IntBuffer p_187433_4_)
     {
-        GL11.glGetTexImage(p_187433_0_, p_187433_1_, p_187433_2_, p_187433_3_, p_187433_4_);
+        //GL11.glGetTexImage(p_187433_0_, p_187433_1_, p_187433_2_, p_187433_3_, p_187433_4_);
     }
 
     public static void enableNormalize()
@@ -516,7 +512,7 @@
         if (mode != activeShadeModel)
         {
             activeShadeModel = mode;
-            GL11.glShadeModel(mode);
+            //GL11.glShadeModel(mode);
         }
     }
 
@@ -532,7 +528,7 @@
 
     public static void viewport(int x, int y, int width, int height)
     {
-        GL11.glViewport(x, y, width, height);
+        //GL11.glViewport(x, y, width, height);
     }
 
     public static void colorMask(boolean red, boolean green, boolean blue, boolean alpha)
@@ -543,7 +539,7 @@
             colorMaskState.green = green;
             colorMaskState.blue = blue;
             colorMaskState.alpha = alpha;
-            GL11.glColorMask(red, green, blue, alpha);
+            //GL11.glColorMask(red, green, blue, alpha);
         }
     }
 
@@ -552,7 +548,7 @@
         if (depth != clearState.depth)
         {
             clearState.depth = depth;
-            GL11.glClearDepth(depth);
+            //GL11.glClearDepth(depth);
         }
     }
 
@@ -564,73 +560,71 @@
             clearState.color.green = green;
             clearState.color.blue = blue;
             clearState.color.alpha = alpha;
-            GL11.glClearColor(red, green, blue, alpha);
+            //GL11.glClearColor(red, green, blue, alpha);
         }
     }
 
     public static void clear(int mask)
     {
-        GL11.glClear(mask);
+        //GL11.glClear(mask);
     }
 
     public static void matrixMode(int mode)
     {
-        GL11.glMatrixMode(mode);
+        //GL11.glMatrixMode(mode);
     }
 
     public static void loadIdentity()
     {
-        GL11.glLoadIdentity();
+        //GL11.glLoadIdentity();
     }
 
     public static void pushMatrix()
     {
-        GL11.glPushMatrix();
+       //GL11.glPushMatrix();
     }
 
     public static void popMatrix()
     {
-        GL11.glPopMatrix();
+        //GL11.glPopMatrix();
     }
 
     public static void getFloat(int pname, FloatBuffer params)
     {
-        GL11.glGetFloat(pname, params);
+        //GL11.glGetFloat(pname, params);
     }
 
     public static void ortho(double left, double right, double bottom, double top, double zNear, double zFar)
     {
-        GL11.glOrtho(left, right, bottom, top, zNear, zFar);
+        //GL11.glOrtho(left, right, bottom, top, zNear, zFar);
     }
 
     public static void rotate(float angle, float x, float y, float z)
     {
-        GL11.glRotatef(angle, x, y, z);
+        //GL11.glRotatef(angle, x, y, z);
     }
 
-    public static void scale(float x, float y, float z)
-    {
-        GL11.glScalef(x, y, z);
+    public static void scale(float x, float y, float z){//GL11.glScalef(x, y, z);
     }
 
     public static void scale(double x, double y, double z)
     {
-        GL11.glScaled(x, y, z);
+        //GL11.glScaled(x, y, z);
     }
 
     public static void translate(float x, float y, float z)
     {
-        GL11.glTranslatef(x, y, z);
+        //GL11.glTranslatef(x, y, z);
     }
 
     public static void translate(double x, double y, double z)
     {
-        GL11.glTranslated(x, y, z);
+        //GL11.glTranslated(x, y, z);
     }
 
     public static void multMatrix(FloatBuffer matrix)
     {
-        GL11.glMultMatrix(matrix);
+        //GL11.glMultMatrix(matrix);
     }
 
     public static void rotate(Quaternion p_187444_0_)
@@ -678,7 +672,7 @@
             colorState.green = colorGreen;
             colorState.blue = colorBlue;
             colorState.alpha = colorAlpha;
-            GL11.glColor4f(colorRed, colorGreen, colorBlue, colorAlpha);
+            //GL11.glColor4f(colorRed, colorGreen, colorBlue, colorAlpha);
         }
     }
 
@@ -689,12 +683,12 @@
 
     public static void glTexCoord2f(float p_187426_0_, float p_187426_1_)
     {
-        GL11.glTexCoord2f(p_187426_0_, p_187426_1_);
+        //GL11.glTexCoord2f(p_187426_0_, p_187426_1_);
     }
 
     public static void glVertex3f(float p_187435_0_, float p_187435_1_, float p_187435_2_)
     {
-        GL11.glVertex3f(p_187435_0_, p_187435_1_, p_187435_2_);
+        //GL11.glVertex3f(p_187435_0_, p_187435_1_, p_187435_2_);
     }
 
     public static void resetColor()
@@ -707,122 +701,122 @@
 
     public static void glNormalPointer(int p_187446_0_, int p_187446_1_, ByteBuffer p_187446_2_)
     {
-        GL11.glNormalPointer(p_187446_0_, p_187446_1_, p_187446_2_);
+        //GL11.glNormalPointer(p_187446_0_, p_187446_1_, p_187446_2_);
     }
 
     public static void glTexCoordPointer(int p_187405_0_, int p_187405_1_, int p_187405_2_, int p_187405_3_)
     {
-        GL11.glTexCoordPointer(p_187405_0_, p_187405_1_, p_187405_2_, (long)p_187405_3_);
+        //GL11.glTexCoordPointer(p_187405_0_, p_187405_1_, p_187405_2_, (long)p_187405_3_);
     }
 
     public static void glTexCoordPointer(int p_187404_0_, int p_187404_1_, int p_187404_2_, ByteBuffer p_187404_3_)
     {
-        GL11.glTexCoordPointer(p_187404_0_, p_187404_1_, p_187404_2_, p_187404_3_);
+        //GL11.glTexCoordPointer(p_187404_0_, p_187404_1_, p_187404_2_, p_187404_3_);
     }
 
     public static void glVertexPointer(int p_187420_0_, int p_187420_1_, int p_187420_2_, int p_187420_3_)
     {
-        GL11.glVertexPointer(p_187420_0_, p_187420_1_, p_187420_2_, (long)p_187420_3_);
+        //GL11.glVertexPointer(p_187420_0_, p_187420_1_, p_187420_2_, (long)p_187420_3_);
     }
 
     public static void glVertexPointer(int p_187427_0_, int p_187427_1_, int p_187427_2_, ByteBuffer p_187427_3_)
     {
-        GL11.glVertexPointer(p_187427_0_, p_187427_1_, p_187427_2_, p_187427_3_);
+        //GL11.glVertexPointer(p_187427_0_, p_187427_1_, p_187427_2_, p_187427_3_);
     }
 
     public static void glColorPointer(int p_187406_0_, int p_187406_1_, int p_187406_2_, int p_187406_3_)
     {
-        GL11.glColorPointer(p_187406_0_, p_187406_1_, p_187406_2_, (long)p_187406_3_);
+        //GL11.glColorPointer(p_187406_0_, p_187406_1_, p_187406_2_, (long)p_187406_3_);
     }
 
     public static void glColorPointer(int p_187400_0_, int p_187400_1_, int p_187400_2_, ByteBuffer p_187400_3_)
     {
-        GL11.glColorPointer(p_187400_0_, p_187400_1_, p_187400_2_, p_187400_3_);
+        //GL11.glColorPointer(p_187400_0_, p_187400_1_, p_187400_2_, p_187400_3_);
     }
 
     public static void glDisableClientState(int p_187429_0_)
     {
-        GL11.glDisableClientState(p_187429_0_);
+        //GL11.glDisableClientState(p_187429_0_);
     }
 
     public static void glEnableClientState(int p_187410_0_)
     {
-        GL11.glEnableClientState(p_187410_0_);
+        //GL11.glEnableClientState(p_187410_0_);
     }
 
     public static void glBegin(int p_187447_0_)
     {
-        GL11.glBegin(p_187447_0_);
+        //GL11.glBegin(p_187447_0_);
     }
 
     public static void glEnd()
     {
-        GL11.glEnd();
+        //GL11.glEnd();
     }
 
     public static void glDrawArrays(int p_187439_0_, int p_187439_1_, int p_187439_2_)
     {
-        GL11.glDrawArrays(p_187439_0_, p_187439_1_, p_187439_2_);
+        //GL11.glDrawArrays(p_187439_0_, p_187439_1_, p_187439_2_);
     }
 
     public static void glLineWidth(float p_187441_0_)
     {
-        GL11.glLineWidth(p_187441_0_);
+        //GL11.glLineWidth(p_187441_0_);
     }
 
     public static void callList(int list)
     {
-        GL11.glCallList(list);
+        //GL11.glCallList(list);
     }
 
     public static void glDeleteLists(int p_187449_0_, int p_187449_1_)
     {
-        GL11.glDeleteLists(p_187449_0_, p_187449_1_);
+        //GL11.glDeleteLists(p_187449_0_, p_187449_1_);
     }
 
     public static void glNewList(int p_187423_0_, int p_187423_1_)
     {
-        GL11.glNewList(p_187423_0_, p_187423_1_);
+        //GL11.glNewList(p_187423_0_, p_187423_1_);
     }
 
     public static void glEndList()
     {
-        GL11.glEndList();
+        //GL11.glEndList();
     }
 
     public static int glGenLists(int p_187442_0_)
     {
-        return GL11.glGenLists(p_187442_0_);
+        return 1;//GL11.glGenLists(p_187442_0_);
     }
 
     public static void glPixelStorei(int p_187425_0_, int p_187425_1_)
     {
-        GL11.glPixelStorei(p_187425_0_, p_187425_1_);
+        //GL11.glPixelStorei(p_187425_0_, p_187425_1_);
     }
 
     public static void glReadPixels(int p_187413_0_, int p_187413_1_, int p_187413_2_, int p_187413_3_, int p_187413_4_, int p_187413_5_, IntBuffer p_187413_6_)
     {
-        GL11.glReadPixels(p_187413_0_, p_187413_1_, p_187413_2_, p_187413_3_, p_187413_4_, p_187413_5_, p_187413_6_);
+        //GL11.glReadPixels(p_187413_0_, p_187413_1_, p_187413_2_, p_187413_3_, p_187413_4_, p_187413_5_, p_187413_6_);
     }
 
     public static int glGetError()
     {
-        return GL11.glGetError();
+        return 0;//GL11.glGetError();
     }
 
     public static String glGetString(int p_187416_0_)
     {
-        return GL11.glGetString(p_187416_0_);
+        return "";//GL11.glGetString(p_187416_0_);
     }
 
     public static void glGetInteger(int p_187445_0_, IntBuffer p_187445_1_)
     {
-        GL11.glGetInteger(p_187445_0_, p_187445_1_);
+        //GL11.glGetInteger(p_187445_0_, p_187445_1_);
     }
 
     public static int glGetInteger(int p_187397_0_)
     {
-        return GL11.glGetInteger(p_187397_0_);
+        return 0;//GL11.glGetInteger(p_187397_0_);
     }
 
     public static void enableBlendProfile(GlStateManager.Profile p_187408_0_)
@@ -926,11 +920,11 @@
 
                 if (state)
                 {
-                    GL11.glEnable(this.capability);
+                    //GL11.glEnable(this.capability);
                 }
                 else
                 {
-                    GL11.glDisable(this.capability);
+                    //GL11.glDisable(this.capability);
                 }
             }
         }
@@ -1157,7 +1151,7 @@
         DEFAULT {
             public void apply()
             {
-                GlStateManager.disableAlpha();
+                /*GlStateManager.disableAlpha();
                 GlStateManager.alphaFunc(519, 0.0F);
                 GlStateManager.disableLighting();
                 GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, (FloatBuffer)RenderHelper.setColorBuffer(0.2F, 0.2F, 0.2F, 1.0F));
@@ -1255,7 +1249,7 @@
                 GL11.glLineWidth(1.0F);
                 GL11.glNormal3f(0.0F, 0.0F, 1.0F);
                 GL11.glPolygonMode(GL11.GL_FRONT, GL11.GL_FILL);
-                GL11.glPolygonMode(GL11.GL_BACK, GL11.GL_FILL);
+                GL11.glPolygonMode(GL11.GL_BACK, GL11.GL_FILL);*/
             }
 
             public void clean()
@@ -1265,8 +1259,8 @@
         PLAYER_SKIN {
             public void apply()
             {
-                GlStateManager.enableBlend();
-                GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
+                //GlStateManager.enableBlend();
+                //GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
             }
 
             public void clean()
@@ -1277,18 +1271,18 @@
         TRANSPARENT_MODEL {
             public void apply()
             {
-                GlStateManager.color(1.0F, 1.0F, 1.0F, 0.15F);
+                /*GlStateManager.color(1.0F, 1.0F, 1.0F, 0.15F);
                 GlStateManager.depthMask(false);
                 GlStateManager.enableBlend();
                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
-                GlStateManager.alphaFunc(516, 0.003921569F);
+                GlStateManager.alphaFunc(516, 0.003921569F);*/
             }
 
             public void clean()
             {
-                GlStateManager.disableBlend();
-                GlStateManager.alphaFunc(516, 0.1F);
-                GlStateManager.depthMask(true);
+                //GlStateManager.disableBlend();
+               // GlStateManager.alphaFunc(516, 0.1F);
+                //GlStateManager.depthMask(true);
             }
         };
 
diff -r -U 3 src/minecraft/net/minecraft/client/renderer/OpenGlHelper.java ../src/main/java/net/minecraft/client/renderer/OpenGlHelper.java
--- src/minecraft/net/minecraft/client/renderer/OpenGlHelper.java	2017-01-26 09:31:14.379076000 -0500
+++ ../src/main/java/net/minecraft/client/renderer/OpenGlHelper.java	2016-12-22 16:34:41.354437200 -0500
@@ -13,21 +13,6 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.Sys;
-import org.lwjgl.opengl.ARBFramebufferObject;
-import org.lwjgl.opengl.ARBMultitexture;
-import org.lwjgl.opengl.ARBShaderObjects;
-import org.lwjgl.opengl.ARBVertexBufferObject;
-import org.lwjgl.opengl.ARBVertexShader;
-import org.lwjgl.opengl.ContextCapabilities;
-import org.lwjgl.opengl.EXTBlendFuncSeparate;
-import org.lwjgl.opengl.EXTFramebufferObject;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL13;
-import org.lwjgl.opengl.GL14;
-import org.lwjgl.opengl.GL15;
-import org.lwjgl.opengl.GL20;
-import org.lwjgl.opengl.GL30;
-import org.lwjgl.opengl.GLContext;
 import oshi.SystemInfo;
 import oshi.hardware.Processor;
 
@@ -105,9 +90,6 @@
      */
     public static void initializeTextures()
     {
-        ContextCapabilities contextcapabilities = GLContext.getCapabilities();
-        arbMultitexture = contextcapabilities.GL_ARB_multitexture && !contextcapabilities.OpenGL13;
-        arbTextureEnvCombine = contextcapabilities.GL_ARB_texture_env_combine && !contextcapabilities.OpenGL13;
 
         if (arbMultitexture)
         {
@@ -171,124 +153,7 @@
             GL_OPERAND2_ALPHA = 34202;
         }
 
-        extBlendFuncSeparate = contextcapabilities.GL_EXT_blend_func_separate && !contextcapabilities.OpenGL14;
-        openGL14 = contextcapabilities.OpenGL14 || contextcapabilities.GL_EXT_blend_func_separate;
-        framebufferSupported = openGL14 && (contextcapabilities.GL_ARB_framebuffer_object || contextcapabilities.GL_EXT_framebuffer_object || contextcapabilities.OpenGL30);
 
-        if (framebufferSupported)
-        {
-            logText = logText + "Using framebuffer objects because ";
-
-            if (contextcapabilities.OpenGL30)
-            {
-                logText = logText + "OpenGL 3.0 is supported and separate blending is supported.\n";
-                framebufferType = OpenGlHelper.FboMode.BASE;
-                GL_FRAMEBUFFER = 36160;
-                GL_RENDERBUFFER = 36161;
-                GL_COLOR_ATTACHMENT0 = 36064;
-                GL_DEPTH_ATTACHMENT = 36096;
-                GL_FRAMEBUFFER_COMPLETE = 36053;
-                GL_FB_INCOMPLETE_ATTACHMENT = 36054;
-                GL_FB_INCOMPLETE_MISS_ATTACH = 36055;
-                GL_FB_INCOMPLETE_DRAW_BUFFER = 36059;
-                GL_FB_INCOMPLETE_READ_BUFFER = 36060;
-            }
-            else if (contextcapabilities.GL_ARB_framebuffer_object)
-            {
-                logText = logText + "ARB_framebuffer_object is supported and separate blending is supported.\n";
-                framebufferType = OpenGlHelper.FboMode.ARB;
-                GL_FRAMEBUFFER = 36160;
-                GL_RENDERBUFFER = 36161;
-                GL_COLOR_ATTACHMENT0 = 36064;
-                GL_DEPTH_ATTACHMENT = 36096;
-                GL_FRAMEBUFFER_COMPLETE = 36053;
-                GL_FB_INCOMPLETE_MISS_ATTACH = 36055;
-                GL_FB_INCOMPLETE_ATTACHMENT = 36054;
-                GL_FB_INCOMPLETE_DRAW_BUFFER = 36059;
-                GL_FB_INCOMPLETE_READ_BUFFER = 36060;
-            }
-            else if (contextcapabilities.GL_EXT_framebuffer_object)
-            {
-                logText = logText + "EXT_framebuffer_object is supported.\n";
-                framebufferType = OpenGlHelper.FboMode.EXT;
-                GL_FRAMEBUFFER = 36160;
-                GL_RENDERBUFFER = 36161;
-                GL_COLOR_ATTACHMENT0 = 36064;
-                GL_DEPTH_ATTACHMENT = 36096;
-                GL_FRAMEBUFFER_COMPLETE = 36053;
-                GL_FB_INCOMPLETE_MISS_ATTACH = 36055;
-                GL_FB_INCOMPLETE_ATTACHMENT = 36054;
-                GL_FB_INCOMPLETE_DRAW_BUFFER = 36059;
-                GL_FB_INCOMPLETE_READ_BUFFER = 36060;
-            }
-        }
-        else
-        {
-            logText = logText + "Not using framebuffer objects because ";
-            logText = logText + "OpenGL 1.4 is " + (contextcapabilities.OpenGL14 ? "" : "not ") + "supported, ";
-            logText = logText + "EXT_blend_func_separate is " + (contextcapabilities.GL_EXT_blend_func_separate ? "" : "not ") + "supported, ";
-            logText = logText + "OpenGL 3.0 is " + (contextcapabilities.OpenGL30 ? "" : "not ") + "supported, ";
-            logText = logText + "ARB_framebuffer_object is " + (contextcapabilities.GL_ARB_framebuffer_object ? "" : "not ") + "supported, and ";
-            logText = logText + "EXT_framebuffer_object is " + (contextcapabilities.GL_EXT_framebuffer_object ? "" : "not ") + "supported.\n";
-        }
-
-        openGL21 = contextcapabilities.OpenGL21;
-        shadersAvailable = openGL21 || contextcapabilities.GL_ARB_vertex_shader && contextcapabilities.GL_ARB_fragment_shader && contextcapabilities.GL_ARB_shader_objects;
-        logText = logText + "Shaders are " + (shadersAvailable ? "" : "not ") + "available because ";
-
-        if (shadersAvailable)
-        {
-            if (contextcapabilities.OpenGL21)
-            {
-                logText = logText + "OpenGL 2.1 is supported.\n";
-                arbShaders = false;
-                GL_LINK_STATUS = 35714;
-                GL_COMPILE_STATUS = 35713;
-                GL_VERTEX_SHADER = 35633;
-                GL_FRAGMENT_SHADER = 35632;
-            }
-            else
-            {
-                logText = logText + "ARB_shader_objects, ARB_vertex_shader, and ARB_fragment_shader are supported.\n";
-                arbShaders = true;
-                GL_LINK_STATUS = 35714;
-                GL_COMPILE_STATUS = 35713;
-                GL_VERTEX_SHADER = 35633;
-                GL_FRAGMENT_SHADER = 35632;
-            }
-        }
-        else
-        {
-            logText = logText + "OpenGL 2.1 is " + (contextcapabilities.OpenGL21 ? "" : "not ") + "supported, ";
-            logText = logText + "ARB_shader_objects is " + (contextcapabilities.GL_ARB_shader_objects ? "" : "not ") + "supported, ";
-            logText = logText + "ARB_vertex_shader is " + (contextcapabilities.GL_ARB_vertex_shader ? "" : "not ") + "supported, and ";
-            logText = logText + "ARB_fragment_shader is " + (contextcapabilities.GL_ARB_fragment_shader ? "" : "not ") + "supported.\n";
-        }
-
-        shadersSupported = framebufferSupported && shadersAvailable;
-        String s = GL11.glGetString(GL11.GL_VENDOR).toLowerCase();
-        nvidia = s.contains("nvidia");
-        arbVbo = !contextcapabilities.OpenGL15 && contextcapabilities.GL_ARB_vertex_buffer_object;
-        vboSupported = contextcapabilities.OpenGL15 || arbVbo;
-        logText = logText + "VBOs are " + (vboSupported ? "" : "not ") + "available because ";
-
-        if (vboSupported)
-        {
-            if (arbVbo)
-            {
-                logText = logText + "ARB_vertex_buffer_object is supported.\n";
-                GL_STATIC_DRAW = 35044;
-                GL_ARRAY_BUFFER = 34962;
-            }
-            else
-            {
-                logText = logText + "OpenGL 1.5 is supported.\n";
-                GL_STATIC_DRAW = 35044;
-                GL_ARRAY_BUFFER = 34962;
-            }
-        }
-
-        ati = s.contains("ati");
 
         if (ati)
         {
@@ -325,31 +190,17 @@
 
     public static int glGetProgrami(int program, int pname)
     {
-        return arbShaders ? ARBShaderObjects.glGetObjectParameteriARB(program, pname) : GL20.glGetProgrami(program, pname);
+        return 0;//arbShaders ? ;//ARBShaderObjects.glGetObjectParameteriARB(program, pname) : GL20.glGetProgrami(program, pname);
     }
 
     public static void glAttachShader(int program, int shaderIn)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glAttachObjectARB(program, shaderIn);
-        }
-        else
-        {
-            GL20.glAttachShader(program, shaderIn);
-        }
+
     }
 
     public static void glDeleteShader(int shaderIn)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glDeleteObjectARB(shaderIn);
-        }
-        else
-        {
-            GL20.glDeleteShader(shaderIn);
-        }
+
     }
 
     /**
@@ -357,282 +208,142 @@
      */
     public static int glCreateShader(int type)
     {
-        return arbShaders ? ARBShaderObjects.glCreateShaderObjectARB(type) : GL20.glCreateShader(type);
+        return 0;// ? ARBShaderObjects.glCreateShaderObjectARB(type) : GL20.glCreateShader(type);
     }
 
     public static void glShaderSource(int shaderIn, ByteBuffer string)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glShaderSourceARB(shaderIn, string);
-        }
-        else
-        {
-            GL20.glShaderSource(shaderIn, string);
-        }
+
     }
 
     public static void glCompileShader(int shaderIn)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glCompileShaderARB(shaderIn);
-        }
-        else
-        {
-            GL20.glCompileShader(shaderIn);
-        }
+
     }
 
     public static int glGetShaderi(int shaderIn, int pname)
     {
-        return arbShaders ? ARBShaderObjects.glGetObjectParameteriARB(shaderIn, pname) : GL20.glGetShaderi(shaderIn, pname);
+        return 0;//arbShaders ? ARBShaderObjects.glGetObjectParameteriARB(shaderIn, pname) : GL20.glGetShaderi(shaderIn, pname);
     }
 
     public static String glGetShaderInfoLog(int shaderIn, int maxLength)
     {
-        return arbShaders ? ARBShaderObjects.glGetInfoLogARB(shaderIn, maxLength) : GL20.glGetShaderInfoLog(shaderIn, maxLength);
+        return "";//arbShaders ? ARBShaderObjects.glGetInfoLogARB(shaderIn, maxLength) : GL20.glGetShaderInfoLog(shaderIn, maxLength);
     }
 
     public static String glGetProgramInfoLog(int program, int maxLength)
     {
-        return arbShaders ? ARBShaderObjects.glGetInfoLogARB(program, maxLength) : GL20.glGetProgramInfoLog(program, maxLength);
+        return "";//arbShaders ? ARBShaderObjects.glGetInfoLogARB(program, maxLength) : GL20.glGetProgramInfoLog(program, maxLength);
     }
 
     public static void glUseProgram(int program)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUseProgramObjectARB(program);
-        }
-        else
-        {
-            GL20.glUseProgram(program);
-        }
+
     }
 
     public static int glCreateProgram()
     {
-        return arbShaders ? ARBShaderObjects.glCreateProgramObjectARB() : GL20.glCreateProgram();
+        return 0;//arbShaders ? ARBShaderObjects.glCreateProgramObjectARB() : GL20.glCreateProgram();
     }
 
     public static void glDeleteProgram(int program)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glDeleteObjectARB(program);
-        }
-        else
-        {
-            GL20.glDeleteProgram(program);
-        }
+
     }
 
     public static void glLinkProgram(int program)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glLinkProgramARB(program);
-        }
-        else
-        {
-            GL20.glLinkProgram(program);
-        }
+
     }
 
     public static int glGetUniformLocation(int programObj, CharSequence name)
     {
-        return arbShaders ? ARBShaderObjects.glGetUniformLocationARB(programObj, name) : GL20.glGetUniformLocation(programObj, name);
+        return 0;//arbShaders ? ARBShaderObjects.glGetUniformLocationARB(programObj, name) : GL20.glGetUniformLocation(programObj, name);
     }
 
     public static void glUniform1(int location, IntBuffer values)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform1ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform1(location, values);
-        }
+
     }
 
     public static void glUniform1i(int location, int v0)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform1iARB(location, v0);
-        }
-        else
-        {
-            GL20.glUniform1i(location, v0);
-        }
+
     }
 
     public static void glUniform1(int location, FloatBuffer values)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform1ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform1(location, values);
-        }
+
     }
 
     public static void glUniform2(int location, IntBuffer values)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform2ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform2(location, values);
-        }
+
     }
 
     public static void glUniform2(int location, FloatBuffer values)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform2ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform2(location, values);
-        }
+
     }
 
     public static void glUniform3(int location, IntBuffer values)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform3ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform3(location, values);
-        }
+
     }
 
     public static void glUniform3(int location, FloatBuffer values)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform3ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform3(location, values);
-        }
+
     }
 
     public static void glUniform4(int location, IntBuffer values)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform4ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform4(location, values);
-        }
+
     }
 
     public static void glUniform4(int location, FloatBuffer values)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform4ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform4(location, values);
-        }
+
     }
 
     public static void glUniformMatrix2(int location, boolean transpose, FloatBuffer matrices)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniformMatrix2ARB(location, transpose, matrices);
-        }
-        else
-        {
-            GL20.glUniformMatrix2(location, transpose, matrices);
-        }
+
     }
 
     public static void glUniformMatrix3(int location, boolean transpose, FloatBuffer matrices)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniformMatrix3ARB(location, transpose, matrices);
-        }
-        else
-        {
-            GL20.glUniformMatrix3(location, transpose, matrices);
-        }
+
     }
 
     public static void glUniformMatrix4(int location, boolean transpose, FloatBuffer matrices)
     {
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniformMatrix4ARB(location, transpose, matrices);
-        }
-        else
-        {
-            GL20.glUniformMatrix4(location, transpose, matrices);
-        }
+
     }
 
     public static int glGetAttribLocation(int program, CharSequence name)
     {
-        return arbShaders ? ARBVertexShader.glGetAttribLocationARB(program, name) : GL20.glGetAttribLocation(program, name);
+        return 0;//arbShaders ? ARBVertexShader.glGetAttribLocationARB(program, name) : GL20.glGetAttribLocation(program, name);
     }
 
     public static int glGenBuffers()
     {
-        return arbVbo ? ARBVertexBufferObject.glGenBuffersARB() : GL15.glGenBuffers();
+        return 0;//arbVbo ? ARBVertexBufferObject.glGenBuffersARB() : GL15.glGenBuffers();
     }
 
     public static void glBindBuffer(int target, int buffer)
     {
-        if (arbVbo)
-        {
-            ARBVertexBufferObject.glBindBufferARB(target, buffer);
-        }
-        else
-        {
-            GL15.glBindBuffer(target, buffer);
-        }
+
     }
 
     public static void glBufferData(int target, ByteBuffer data, int usage)
     {
-        if (arbVbo)
-        {
-            ARBVertexBufferObject.glBufferDataARB(target, data, usage);
-        }
-        else
-        {
-            GL15.glBufferData(target, data, usage);
-        }
+
     }
 
     public static void glDeleteBuffers(int buffer)
     {
-        if (arbVbo)
-        {
-            ARBVertexBufferObject.glDeleteBuffersARB(buffer);
-        }
-        else
-        {
-            GL15.glDeleteBuffers(buffer);
-        }
+
     }
 
     public static boolean useVbo()
@@ -644,19 +355,7 @@
     {
         if (framebufferSupported)
         {
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glBindFramebuffer(target, framebufferIn);
-                    break;
-
-                case ARB:
-                    ARBFramebufferObject.glBindFramebuffer(target, framebufferIn);
-                    break;
 
-                case EXT:
-                    EXTFramebufferObject.glBindFramebufferEXT(target, framebufferIn);
-            }
         }
     }
 
@@ -664,19 +363,7 @@
     {
         if (framebufferSupported)
         {
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glBindRenderbuffer(target, renderbuffer);
-                    break;
 
-                case ARB:
-                    ARBFramebufferObject.glBindRenderbuffer(target, renderbuffer);
-                    break;
-
-                case EXT:
-                    EXTFramebufferObject.glBindRenderbufferEXT(target, renderbuffer);
-            }
         }
     }
 
@@ -684,19 +371,7 @@
     {
         if (framebufferSupported)
         {
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glDeleteRenderbuffers(renderbuffer);
-                    break;
 
-                case ARB:
-                    ARBFramebufferObject.glDeleteRenderbuffers(renderbuffer);
-                    break;
-
-                case EXT:
-                    EXTFramebufferObject.glDeleteRenderbuffersEXT(renderbuffer);
-            }
         }
     }
 
@@ -704,19 +379,7 @@
     {
         if (framebufferSupported)
         {
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glDeleteFramebuffers(framebufferIn);
-                    break;
-
-                case ARB:
-                    ARBFramebufferObject.glDeleteFramebuffers(framebufferIn);
-                    break;
 
-                case EXT:
-                    EXTFramebufferObject.glDeleteFramebuffersEXT(framebufferIn);
-            }
         }
     }
 
@@ -731,20 +394,7 @@
         }
         else
         {
-            switch (framebufferType)
-            {
-                case BASE:
-                    return GL30.glGenFramebuffers();
-
-                case ARB:
-                    return ARBFramebufferObject.glGenFramebuffers();
-
-                case EXT:
-                    return EXTFramebufferObject.glGenFramebuffersEXT();
-
-                default:
-                    return -1;
-            }
+            return 0;
         }
     }
 
@@ -756,20 +406,7 @@
         }
         else
         {
-            switch (framebufferType)
-            {
-                case BASE:
-                    return GL30.glGenRenderbuffers();
-
-                case ARB:
-                    return ARBFramebufferObject.glGenRenderbuffers();
-
-                case EXT:
-                    return EXTFramebufferObject.glGenRenderbuffersEXT();
-
-                default:
-                    return -1;
-            }
+            return -1;
         }
     }
 
@@ -777,19 +414,7 @@
     {
         if (framebufferSupported)
         {
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glRenderbufferStorage(target, internalFormat, width, height);
-                    break;
 
-                case ARB:
-                    ARBFramebufferObject.glRenderbufferStorage(target, internalFormat, width, height);
-                    break;
-
-                case EXT:
-                    EXTFramebufferObject.glRenderbufferStorageEXT(target, internalFormat, width, height);
-            }
         }
     }
 
@@ -797,24 +422,14 @@
     {
         if (framebufferSupported)
         {
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glFramebufferRenderbuffer(target, attachment, renderBufferTarget, renderBuffer);
-                    break;
-
-                case ARB:
-                    ARBFramebufferObject.glFramebufferRenderbuffer(target, attachment, renderBufferTarget, renderBuffer);
-                    break;
 
-                case EXT:
-                    EXTFramebufferObject.glFramebufferRenderbufferEXT(target, attachment, renderBufferTarget, renderBuffer);
-            }
         }
     }
 
     public static int glCheckFramebufferStatus(int target)
     {
+        return -1;
+        /*
         if (!framebufferSupported)
         {
             return -1;
@@ -835,11 +450,12 @@
                 default:
                     return -1;
             }
-        }
+        }*/
     }
 
     public static void glFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level)
     {
+        /*
         if (framebufferSupported)
         {
             switch (framebufferType)
@@ -856,6 +472,7 @@
                     EXTFramebufferObject.glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
             }
         }
+        */
     }
 
     /**
@@ -865,11 +482,11 @@
     {
         if (arbMultitexture)
         {
-            ARBMultitexture.glActiveTextureARB(texture);
+            //ARBMultitexture.glActiveTextureARB(texture);
         }
         else
         {
-            GL13.glActiveTexture(texture);
+            //GL13.glActiveTexture(texture);
         }
     }
 
@@ -880,11 +497,11 @@
     {
         if (arbMultitexture)
         {
-            ARBMultitexture.glClientActiveTextureARB(texture);
+            //ARBMultitexture.glClientActiveTextureARB(texture);
         }
         else
         {
-            GL13.glClientActiveTexture(texture);
+            //GL13.glClientActiveTexture(texture);
         }
     }
 
@@ -895,11 +512,11 @@
     {
         if (arbMultitexture)
         {
-            ARBMultitexture.glMultiTexCoord2fARB(target, p_77475_1_, t);
+            //ARBMultitexture.glMultiTexCoord2fARB(target, p_77475_1_, t);
         }
         else
         {
-            GL13.glMultiTexCoord2f(target, p_77475_1_, t);
+            //GL13.glMultiTexCoord2f(target, p_77475_1_, t);
         }
     }
 
@@ -909,16 +526,16 @@
         {
             if (extBlendFuncSeparate)
             {
-                EXTBlendFuncSeparate.glBlendFuncSeparateEXT(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
+                //EXTBlendFuncSeparate.glBlendFuncSeparateEXT(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
             }
             else
             {
-                GL14.glBlendFuncSeparate(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
+                //GL14.glBlendFuncSeparate(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
             }
         }
         else
         {
-            GL11.glBlendFunc(sFactorRGB, dFactorRGB);
+            //GL11.glBlendFunc(sFactorRGB, dFactorRGB);
         }
     }
 
@@ -938,7 +555,7 @@
         GlStateManager.depthMask(false);
         Tessellator tessellator = Tessellator.getInstance();
         VertexBuffer vertexbuffer = tessellator.getBuffer();
-        GL11.glLineWidth(4.0F);
+        //GL11.glLineWidth(4.0F);
         vertexbuffer.begin(1, DefaultVertexFormats.POSITION_COLOR);
         vertexbuffer.pos(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
         vertexbuffer.pos((double)p_188785_0_, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
@@ -947,7 +564,7 @@
         vertexbuffer.pos(0.0D, 0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
         vertexbuffer.pos(0.0D, 0.0D, (double)p_188785_0_).color(0, 0, 0, 255).endVertex();
         tessellator.draw();
-        GL11.glLineWidth(2.0F);
+        //GL11.glLineWidth(2.0F);
         vertexbuffer.begin(1, DefaultVertexFormats.POSITION_COLOR);
         vertexbuffer.pos(0.0D, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
         vertexbuffer.pos((double)p_188785_0_, 0.0D, 0.0D).color(255, 0, 0, 255).endVertex();
@@ -956,7 +573,7 @@
         vertexbuffer.pos(0.0D, 0.0D, 0.0D).color(127, 127, 255, 255).endVertex();
         vertexbuffer.pos(0.0D, 0.0D, (double)p_188785_0_).color(127, 127, 255, 255).endVertex();
         tessellator.draw();
-        GL11.glLineWidth(1.0F);
+        //GL11.glLineWidth(1.0F);
         GlStateManager.depthMask(true);
         GlStateManager.enableTexture2D();
     }
diff -r -U 3 src/minecraft/net/minecraft/client/renderer/texture/Stitcher.java ../src/main/java/net/minecraft/client/renderer/texture/Stitcher.java
--- src/minecraft/net/minecraft/client/renderer/texture/Stitcher.java	2017-01-26 09:31:15.429494000 -0500
+++ ../src/main/java/net/minecraft/client/renderer/texture/Stitcher.java	2016-12-23 17:08:52.985617000 -0500
@@ -99,56 +99,56 @@
     /**
      * Attempts to find space for specified tile
      */
-    private boolean allocateSlot(Stitcher.Holder p_94310_1_)
+    private boolean allocateSlot(Stitcher.Holder holderToInsert)
     {
-        TextureAtlasSprite textureatlassprite = p_94310_1_.getAtlasSprite();
+        TextureAtlasSprite textureatlassprite = holderToInsert.getAtlasSprite();
         boolean flag = textureatlassprite.getIconWidth() != textureatlassprite.getIconHeight();
 
         for (int i = 0; i < this.stitchSlots.size(); ++i)
         {
-            if (((Stitcher.Slot)this.stitchSlots.get(i)).addSlot(p_94310_1_))
+            if (((Stitcher.Slot)this.stitchSlots.get(i)).addSlot(holderToInsert))
             {
                 return true;
             }
 
             if (flag)
             {
-                p_94310_1_.rotate();
+                holderToInsert.rotate();
 
-                if (((Stitcher.Slot)this.stitchSlots.get(i)).addSlot(p_94310_1_))
+                if (((Stitcher.Slot)this.stitchSlots.get(i)).addSlot(holderToInsert))
                 {
                     return true;
                 }
 
-                p_94310_1_.rotate();
+                holderToInsert.rotate();
             }
         }
 
-        return this.expandAndAllocateSlot(p_94310_1_);
+        return this.expandAndAllocateSlot(holderToInsert);
     }
 
     /**
      * Expand stitched texture in order to make space for specified tile
      */
-    private boolean expandAndAllocateSlot(Stitcher.Holder p_94311_1_)
+    private boolean expandAndAllocateSlot(Stitcher.Holder holderToInsert)
     {
-        int i = Math.min(p_94311_1_.getWidth(), p_94311_1_.getHeight());
-        int j = Math.max(p_94311_1_.getWidth(), p_94311_1_.getHeight());
-        int k = MathHelper.roundUpToPowerOfTwo(this.currentWidth);
-        int l = MathHelper.roundUpToPowerOfTwo(this.currentHeight);
-        int i1 = MathHelper.roundUpToPowerOfTwo(this.currentWidth + i);
-        int j1 = MathHelper.roundUpToPowerOfTwo(this.currentHeight + i);
-        boolean flag1 = i1 <= this.maxWidth;
-        boolean flag2 = j1 <= this.maxHeight;
+        int minOfWidthAndHeight = Math.min(holderToInsert.getWidth(), holderToInsert.getHeight());
+        int maxOfWidthAndHeight = Math.max(holderToInsert.getWidth(), holderToInsert.getHeight());
+        int widthPowerOfTwo = MathHelper.roundUpToPowerOfTwo(this.currentWidth);
+        int heightPowerOfTwo = MathHelper.roundUpToPowerOfTwo(this.currentHeight);
+        int expandedWidth = MathHelper.roundUpToPowerOfTwo(this.currentWidth + minOfWidthAndHeight);
+        int expendedHeight = MathHelper.roundUpToPowerOfTwo(this.currentHeight + minOfWidthAndHeight);
+        boolean expandedWidthSmallEnough = expandedWidth <= this.maxWidth;
+        boolean expandedHeightSmallEnough = expendedHeight <= this.maxHeight;
 
-        if (!flag1 && !flag2)
+        if (!expandedWidthSmallEnough && !expandedHeightSmallEnough)
         {
             return false;
         }
         else
         {
-            boolean flag3 = flag1 && k != i1;
-            boolean flag4 = flag2 && l != j1;
+            boolean flag3 = expandedWidthSmallEnough && widthPowerOfTwo != expandedWidth;
+            boolean flag4 = expandedHeightSmallEnough && heightPowerOfTwo != expendedHeight;
             boolean flag;
 
             if (flag3 ^ flag4)
@@ -157,33 +157,33 @@
             }
             else
             {
-                flag = flag1 && k <= l;
+                flag = expandedWidthSmallEnough && widthPowerOfTwo <= heightPowerOfTwo;
             }
 
             Stitcher.Slot stitcher$slot;
 
             if (flag)
             {
-                if (p_94311_1_.getWidth() > p_94311_1_.getHeight())
+                if (holderToInsert.getWidth() > holderToInsert.getHeight())
                 {
-                    p_94311_1_.rotate();
+                    holderToInsert.rotate();
                 }
 
                 if (this.currentHeight == 0)
                 {
-                    this.currentHeight = p_94311_1_.getHeight();
+                    this.currentHeight = holderToInsert.getHeight();
                 }
 
-                stitcher$slot = new Stitcher.Slot(this.currentWidth, 0, p_94311_1_.getWidth(), this.currentHeight);
-                this.currentWidth += p_94311_1_.getWidth();
+                stitcher$slot = new Stitcher.Slot(this.currentWidth, 0, holderToInsert.getWidth(), this.currentHeight);
+                this.currentWidth += holderToInsert.getWidth();
             }
             else
             {
-                stitcher$slot = new Stitcher.Slot(0, this.currentHeight, this.currentWidth, p_94311_1_.getHeight());
-                this.currentHeight += p_94311_1_.getHeight();
+                stitcher$slot = new Stitcher.Slot(0, this.currentHeight, this.currentWidth, holderToInsert.getHeight());
+                this.currentHeight += holderToInsert.getHeight();
             }
 
-            stitcher$slot.addSlot(p_94311_1_);
+            stitcher$slot.addSlot(holderToInsert);
             this.stitchSlots.add(stitcher$slot);
             return true;
         }
