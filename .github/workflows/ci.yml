name: CI
on: [push]

jobs:
  build-linux-gcc:
    # Even tho we run the real build in an arch linux docker
    # containerwe need to specify a HostOS
    runs-on: ubuntu-latest

    # Run the real build on an arch linux docker container
    # Ubuntu has out of date tools and sometimes system updates
    # require manual interaction so its unusable for CI
    container: archlinux/base

    steps:
      # 1. Update the system
      #    Arch linux updates NEVER require manual interaction,
      #    so this is safe in combination with --noconfirm
      - name: Update System
        run: pacman --noconfirm -Syu
      # 2. Install the required dependencies
      - name: Install dependencies
        run: pacman --noconfirm -S cmake make binutils gcc python3 git vulkan-devel ninja tar unzip which
      # 3. Checkout the repository, this is done via a github action
      - name: Checkout repository
        uses: actions/checkout@master
      # 4. Prepare nova
      #    Currently there are 2 different build methods in use with nova,
      #    so check which one the branch we are on is using and adjust as required
      - name: Prepare
        shell: bash
        run: |
          set -e

          if [[ -f "build.py" ]]; then
              # The new build.py method is easy, just run it with python
              # and we are good to go
              python3 build.py
          else
              # The fiddly part, this will require a manual install of vcpkg... lets do it
              git clone https://github.com/microsoft/vcpkg vcpkg
              pushd vcpkg
              bash bootstrap-vcpkg.sh
              export PATH=`pwd`:$PATH
              popd
              # Now vcpkg should be set up
              VULKAN_SDK=/usr bash setup-linux.sh
          fi
      # 5. Configure with CMake
      - name: Configure with CMake
        run: |
          mkdir build
          cd build
          VULKAN_SDK=/usr cmake ..   \
            -G"Unix Makefiles"       \
            -DNOVA_TEST=ON           \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      # 6. Build with CMake
      #    We use 3 threads on 2 cores since thats what Github provides as of writing this script,
      #    for further reference see https://help.github.com/en/articles/virtual-environments-for-github-actions
      - name: Build with CMake
        working-directory: build
        run: cmake --build . -- -j3
      # 7. Run the unit tests
      - name: Run unit tests
        working-directory: build
        run: ./nova-test-unit --gtest_color=yes
      # 8. Prepare artifacts for uploading
      - name: Prepare artifacts
        run: |
          # Binary artifacts
          mkdir artifacts
          cp LICENSE artifacts
          cp build/nova-test-unit artifacts
          cp build/nova-test-end-to-end artifacts
          cp build/libnova-renderer.a artifacts
      # 9. Upload binary artifacts
      - name: Upload binary artifacts
        uses: actions/upload-artifact@master
        with:
          name: binary-linux-gcc
          path: artifacts

  build-linux-clang:
    # Even tho we run the real build in an arch linux docker
    # containerwe need to specify a HostOS
    runs-on: ubuntu-latest

    # Run the real build on an arch linux docker container
    # Ubuntu has out of date tools and sometimes system updates
    # require manual interaction so its unusable for CI
    container: archlinux/base

    steps:
      # 1. Update the system
      #    Arch linux updates NEVER require manual interaction,
      #    so this is safe in combination with --noconfirm
      - name: Update System
        run: pacman --noconfirm -Syu
      # 2. Install the required dependencies
      - name: Install dependencies
        run: pacman --noconfirm -S cmake ninja binutils clang python3 git vulkan-devel tar unzip which
      # 3. Checkout the repository, this is done via a github action
      - name: Checkout repository
        uses: actions/checkout@master
      # 4. Prepare nova
      #    Currently there are 2 different build methods in use with nova,
      #    so check which one the branch we are on is using and adjust as required
      - name: Prepare
        shell: bash
        run: |
          set -e

          if [[ -f "build.py" ]]; then
              # The new build.py method is easy, just run it with python
              # and we are good to go
              python3 build.py
          else
              # The fiddly part, this will require a manual install of vcpkg... lets do it
              git clone https://github.com/microsoft/vcpkg vcpkg
              pushd vcpkg
              bash bootstrap-vcpkg.sh
              export PATH=`pwd`:$PATH
              popd
              # Now vcpkg should be set up
              VULKAN_SDK=/usr bash setup-linux.sh
          fi
      # 5. Configure with CMake
      - name: Configure with CMake
        run: |
          mkdir build
          cd build
          VULKAN_SDK=/usr cmake ..                                           \
            -G"Ninja"                                                        \
            -DNOVA_TEST=ON                                                   \
            -DCMAKE_BUILD_TYPE=Debug                                         \
            -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_CXX_COMPILER=clang++                                     \
            -DCMAKE_C_COMPILER=clang
      # 6. Build with CMake
      - name: Build with CMake
        working-directory: build
        run: cmake --build .
      # 7. Run the unit tests
      - name: Run unit tests
        working-directory: build
        run: ./nova-test-unit --gtest_color=yes
      # 8. Prepare artifacts for uploading
      - name: Prepare artifacts
        run: |
          # Binary artifacts
          mkdir artifacts
          cp LICENSE artifacts
          cp build/nova-test-unit artifacts
          cp build/nova-test-end-to-end artifacts
          cp build/libnova-renderer.a artifacts
      # 9. Upload binary artifacts
      - name: Upload binary artifacts
        uses: actions/upload-artifact@master
        with:
          name: binary-linux-clang
          path: artifacts

  build-windows-msvc:
    # Running on Windows Server 2019 or whatever the latest version is,
    # lets hope this goes well...
    runs-on: windows-latest

    steps:
      # 1. Download the VulkanSDK
      - name: Download VulkanSDK
        shell: powershell
        run: |
          $web = New-Object System.Net.WebClient
          $web.UseDefaultCredentials = $True
          $url = "https://sdk.lunarg.com/sdk/download/1.1.121.2/windows/VulkanSDK-1.1.121.2-Installer.exe?Human=true"
          $file = "VulkanSDK-Installer.exe"
          Register-ObjectEvent -InputObject $web -EventName DownloadFileCompleted `
          -SourceIdentifier Web.DownloadFileCompleted -Action {    
              $Global:isDownloaded = $True
          }
          Register-ObjectEvent -InputObject $web -EventName DownloadProgressChanged `
          -SourceIdentifier Web.DownloadProgressChanged -Action {
              $Global:Data = $event
          }
          $web.DownloadFileAsync($url,$file)
          
          $last_percentage = -1

          While (-Not $isDownloaded) {
              $percentage = $Global:Data.SourceArgs.ProgressPercentage
              $totalBytes = $Global:Data.SourceArgs.TotalBytesToReceive
              $receivedBytes = $Global:Data.SourceArgs.BytesReceived
              If ($null -ne $percentage) {
                  If($percentage - 10 -gt $last_percentage) {
                      Write-Host ("{0}% ({1}/{2})" -f $percentage,$receivedBytes,$totalBytes)
                      $last_percentage = $percentage
                  }
              }
          }
          Write-Host ("100% ({0}/{1})" -f $receivedBytes,$totalBytes)
      # 2. Install the VulkanSDK
      - name: Install VulkanSDK
        run: .\VulkanSDK-Installer.exe /S
      # 3. Checkout the repository, this is done via a github action
      - name: Checkout repository
        uses: actions/checkout@master
      # 4. Prepare nova
      #    Currently there are 2 different build methods in use with nova,
      #    so check which one the branch we are on is using and adjust as required
      - name: Prepare
        shell: bash
        run: |
          set -e

          if [[ -f "build.py" ]]; then
              # The new build.py method is easy, just run it with python
              # and we are good to go
              python build.py
          else
              # vcpkg is provided via the system
              VULKAN_SDK='C:\\VulkanSDK\\1.1.121.2' powershell .\\setup-windows.ps1
          fi
      # 5. Configure with CMake
      - name: Configure with CMake
        shell: bash
        run: |
          mkdir build
          cd build
          VULKAN_SDK='C:\\VulkanSDK\\1.1.121.2' cmake .. \
            -G "Visual Studio 16 2019" -A x64            \
            -DNOVA_TEST=ON                               \
            -DCMAKE_BUILD_TYPE=Debug                     \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
      # 6. Build with CMake
      - name: Build with CMake
        working-directory: build
        shell: bash
        run: cmake --build .
      # 7. Run the unit tests
      - name: Run unit tests
        working-directory: build/Debug
        shell: bash
        run: ./nova-test-unit.exe --gtest_color=yes
      # 8. Prepare artifacts for uploading
      - name: Prepare artifacts
        shell: bash
        run: |
          # Binary artifacts
          mkdir artifacts
          cp LICENSE artifacts
          cp build/Debug/nova-test-unit.exe artifacts
          cp build/Debug/nova-test-end-to-end.exe artifacts
          cp build/Debug/nova-renderer.lib artifacts
      # 9. Upload binary artifacts
      - name: Upload binary artifacts
        uses: actions/upload-artifact@master
        with:
          name: binary-windows-msvc
          path: artifacts

  build-simple-artifacts:
    # Let's use linux for packaging up our artifacts which don't
    # require building
    # We could also use Windows or OSX, but Linux seems to be most fitting
    runs-on: ubuntu-latest

    steps:
      # Of course we need a copy of the repository
      - name: Checkout repository
        uses: actions/checkout@master
      # Preparation of the artifacts, for example adding LICENSE
      - name: Prepare artifacts
        run: |
          mkdir artifacts

          # Docs
          mkdir artifacts/docs
          cp -r docs/* artifacts/docs
          cp LICENSE artifacts/docs
          cp readme.md artifacts/docs

          # Headers
          mkdir artifacts/headers
          cp -r include/* artifacts/headers
          cp LICENSE artifacts/headers
      # Upload the docs artifact
      - name: Upload docs
        uses: actions/upload-artifact@master
        with:
          name: docs
          path: artifacts/docs
      # Upload the headers artifact
      - name: Upload headers
        uses: actions/upload-artifact@master
        with:
          name: headers
          path: artifacts/headers
          